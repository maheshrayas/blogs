// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(renamed_and_removed_lints)]
#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports, clippy::wildcard_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("http_bpf")
            .map("active_app_sockets", false)
            .map("read_args_map", false)
            .map("http_events", false)
            .map("tracked_pids", false)
            .prog("handle_accept4_ret")
            .prog("kprobe_ksys_read_entry")
            .prog("kretprobe_ksys_read_exit")
            .prog("kprobe_ksys_close");
        builder.build()
    }
    pub struct OpenHttpMaps<'obj> {
        pub active_app_sockets: libbpf_rs::OpenMapMut<'obj>,
        pub read_args_map: libbpf_rs::OpenMapMut<'obj>,
        pub http_events: libbpf_rs::OpenMapMut<'obj>,
        pub tracked_pids: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenHttpMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut active_app_sockets = None;
            let mut read_args_map = None;
            let mut http_events = None;
            let mut tracked_pids = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "active_app_sockets" => active_app_sockets = Some(map),
                    "read_args_map" => read_args_map = Some(map),
                    "http_events" => http_events = Some(map),
                    "tracked_pids" => tracked_pids = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                active_app_sockets: active_app_sockets
                    .expect("map `active_app_sockets` not present"),
                read_args_map: read_args_map.expect("map `read_args_map` not present"),
                http_events: http_events.expect("map `http_events` not present"),
                tracked_pids: tracked_pids.expect("map `tracked_pids` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct HttpMaps<'obj> {
        pub active_app_sockets: libbpf_rs::MapMut<'obj>,
        pub read_args_map: libbpf_rs::MapMut<'obj>,
        pub http_events: libbpf_rs::MapMut<'obj>,
        pub tracked_pids: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> HttpMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut active_app_sockets = None;
            let mut read_args_map = None;
            let mut http_events = None;
            let mut tracked_pids = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "active_app_sockets" => active_app_sockets = Some(map),
                    "read_args_map" => read_args_map = Some(map),
                    "http_events" => http_events = Some(map),
                    "tracked_pids" => tracked_pids = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                active_app_sockets: active_app_sockets
                    .expect("map `active_app_sockets` not present"),
                read_args_map: read_args_map.expect("map `read_args_map` not present"),
                http_events: http_events.expect("map `http_events` not present"),
                tracked_pids: tracked_pids.expect("map `tracked_pids` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenHttpProgs<'obj> {
        pub handle_accept4_ret: libbpf_rs::OpenProgramMut<'obj>,
        pub kprobe_ksys_read_entry: libbpf_rs::OpenProgramMut<'obj>,
        pub kretprobe_ksys_read_exit: libbpf_rs::OpenProgramMut<'obj>,
        pub kprobe_ksys_close: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenHttpProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut handle_accept4_ret = None;
            let mut kprobe_ksys_read_entry = None;
            let mut kretprobe_ksys_read_exit = None;
            let mut kprobe_ksys_close = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "handle_accept4_ret" => handle_accept4_ret = Some(prog),
                    "kprobe_ksys_read_entry" => kprobe_ksys_read_entry = Some(prog),
                    "kretprobe_ksys_read_exit" => kretprobe_ksys_read_exit = Some(prog),
                    "kprobe_ksys_close" => kprobe_ksys_close = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                handle_accept4_ret: handle_accept4_ret
                    .expect("prog `handle_accept4_ret` not present"),
                kprobe_ksys_read_entry: kprobe_ksys_read_entry
                    .expect("prog `kprobe_ksys_read_entry` not present"),
                kretprobe_ksys_read_exit: kretprobe_ksys_read_exit
                    .expect("prog `kretprobe_ksys_read_exit` not present"),
                kprobe_ksys_close: kprobe_ksys_close.expect("prog `kprobe_ksys_close` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct HttpProgs<'obj> {
        pub handle_accept4_ret: libbpf_rs::ProgramMut<'obj>,
        pub kprobe_ksys_read_entry: libbpf_rs::ProgramMut<'obj>,
        pub kretprobe_ksys_read_exit: libbpf_rs::ProgramMut<'obj>,
        pub kprobe_ksys_close: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> HttpProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenHttpProgs<'obj>) -> Self {
            Self {
                handle_accept4_ret: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.handle_accept4_ret.as_libbpf_object().as_mut(),
                    )
                },
                kprobe_ksys_read_entry: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs
                            .kprobe_ksys_read_entry
                            .as_libbpf_object()
                            .as_mut(),
                    )
                },
                kretprobe_ksys_read_exit: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs
                            .kretprobe_ksys_read_exit
                            .as_libbpf_object()
                            .as_mut(),
                    )
                },
                kprobe_ksys_close: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.kprobe_ksys_close.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct HttpSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> HttpSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenHttpSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenHttpSkel {
                maps: unsafe { OpenHttpMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenHttpProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for HttpSkelBuilder {
        type Output = OpenHttpSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenHttpSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenHttpSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 1],
            pub max_entries: *mut [i32; 10240],
            pub key_size: *mut [i32; 4],
            pub value_size: *mut [i32; 4],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    key_size: std::ptr::null_mut(),
                    value_size: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_2 {
            pub r#type: *mut [i32; 1],
            pub max_entries: *mut [i32; 1024],
            pub key_size: *mut [i32; 8],
            pub value_size: *mut [i32; 8],
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    key_size: std::ptr::null_mut(),
                    value_size: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_3 {
            pub r#type: *mut [i32; 4],
            pub key_size: *mut [i32; 4],
            pub value_size: *mut [i32; 4],
        }
        impl Default for __anon_3 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key_size: std::ptr::null_mut(),
                    value_size: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_4 {
            pub r#type: *mut [i32; 1],
            pub max_entries: *mut [i32; 1024],
            pub key_size: *mut [i32; 4],
            pub value_size: *mut [i32; 1],
        }
        impl Default for __anon_4 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    key_size: std::ptr::null_mut(),
                    value_size: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct pt_regs {
            pub r15: u64,
            pub r14: u64,
            pub r13: u64,
            pub r12: u64,
            pub bp: u64,
            pub bx: u64,
            pub r11: u64,
            pub r10: u64,
            pub r9: u64,
            pub r8: u64,
            pub ax: u64,
            pub cx: u64,
            pub dx: u64,
            pub si: u64,
            pub di: u64,
            pub orig_ax: u64,
            pub ip: u64,
            pub cs: u64,
            pub flags: u64,
            pub sp: u64,
            pub ss: u64,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 13],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub active_app_sockets: __anon_1,
            pub read_args_map: __anon_2,
            pub http_events: __anon_3,
            pub tracked_pids: __anon_4,
        }
    }
    pub struct OpenHttpSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenHttpMaps<'obj>,
        pub progs: OpenHttpProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenHttpSkel<'obj> {
        type Output = HttpSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<HttpSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(HttpSkel {
                maps: unsafe { HttpMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: HttpProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: HttpLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct HttpLinks {
        pub handle_accept4_ret: Option<libbpf_rs::Link>,
        pub kprobe_ksys_read_entry: Option<libbpf_rs::Link>,
        pub kretprobe_ksys_read_exit: Option<libbpf_rs::Link>,
        pub kprobe_ksys_close: Option<libbpf_rs::Link>,
    }
    pub struct HttpSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: HttpMaps<'obj>,
        pub progs: HttpProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: HttpLinks,
    }

    unsafe impl Send for HttpSkel<'_> {}
    unsafe impl Sync for HttpSkel<'_> {}

    impl<'obj> Skel<'obj> for HttpSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = HttpLinks {
                handle_accept4_ret: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
                kprobe_ksys_read_entry: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
                kretprobe_ksys_read_exit: core::ptr::NonNull::new(
                    self.skel_config.prog_link_ptr(2)?,
                )
                .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
                kprobe_ksys_close: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(3)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl HttpSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 15, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 107, 114, 101, 116, 112, 114, 111, 98, 101, 47, 95, 95, 115, 121, 115, 95, 97, 99,
        99, 101, 112, 116, 52, 0, 107, 112, 114, 111, 98, 101, 47, 107, 115, 121, 115, 95, 114,
        101, 97, 100, 0, 107, 114, 101, 116, 112, 114, 111, 98, 101, 47, 107, 115, 121, 115, 95,
        114, 101, 97, 100, 0, 107, 112, 114, 111, 98, 101, 47, 95, 95, 120, 54, 52, 95, 115, 121,
        115, 95, 99, 108, 111, 115, 101, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112,
        115, 0, 104, 116, 116, 112, 46, 98, 112, 102, 46, 99, 0, 76, 66, 66, 48, 95, 51, 0, 76, 66,
        66, 49, 95, 50, 0, 76, 66, 66, 50, 95, 49, 49, 0, 76, 66, 66, 50, 95, 49, 53, 0, 76, 66,
        66, 50, 95, 49, 55, 0, 76, 66, 66, 50, 95, 50, 52, 0, 76, 66, 66, 50, 95, 51, 48, 0, 76,
        66, 66, 50, 95, 51, 50, 0, 76, 66, 66, 50, 95, 52, 0, 76, 73, 67, 69, 78, 83, 69, 0, 97,
        99, 116, 105, 118, 101, 95, 97, 112, 112, 95, 115, 111, 99, 107, 101, 116, 115, 0, 104, 97,
        110, 100, 108, 101, 95, 97, 99, 99, 101, 112, 116, 52, 95, 114, 101, 116, 0, 104, 116, 116,
        112, 95, 101, 118, 101, 110, 116, 115, 0, 107, 112, 114, 111, 98, 101, 95, 107, 115, 121,
        115, 95, 99, 108, 111, 115, 101, 0, 107, 112, 114, 111, 98, 101, 95, 107, 115, 121, 115,
        95, 114, 101, 97, 100, 95, 101, 110, 116, 114, 121, 0, 107, 114, 101, 116, 112, 114, 111,
        98, 101, 95, 107, 115, 121, 115, 95, 114, 101, 97, 100, 95, 101, 120, 105, 116, 0, 114,
        101, 97, 100, 95, 97, 114, 103, 115, 95, 109, 97, 112, 0, 116, 114, 97, 99, 107, 101, 100,
        95, 112, 105, 100, 115, 0, 46, 114, 101, 108, 107, 114, 101, 116, 112, 114, 111, 98, 101,
        47, 95, 95, 115, 121, 115, 95, 97, 99, 99, 101, 112, 116, 52, 0, 46, 114, 101, 108, 107,
        112, 114, 111, 98, 101, 47, 107, 115, 121, 115, 95, 114, 101, 97, 100, 0, 46, 114, 101,
        108, 107, 114, 101, 116, 112, 114, 111, 98, 101, 47, 107, 115, 121, 115, 95, 114, 101, 97,
        100, 0, 46, 114, 101, 108, 107, 112, 114, 111, 98, 101, 47, 95, 95, 120, 54, 52, 95, 115,
        121, 115, 95, 99, 108, 111, 115, 101, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120,
        116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        115, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
        0, 0, 3, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 4, 0,
        160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 5, 0, 112, 2, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 5, 0, 176, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 5, 0, 208, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 164, 0, 0, 0, 0, 0, 5, 0, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
        0, 0, 0, 5, 0, 152, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 5, 0,
        32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 5, 0, 232, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 0, 0, 0, 17, 0, 7, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0,
        0, 0, 241, 0, 0, 0, 17, 0, 8, 0, 64, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 253, 0,
        0, 0, 18, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 15, 1, 0, 0, 18, 0, 4,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 38, 1, 0, 0, 18, 0, 5, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0, 63, 1, 0, 0, 17, 0, 8, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 77, 1, 0, 0, 17, 0, 8, 0, 88, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
        0, 0, 121, 17, 80, 0, 0, 0, 0, 0, 99, 26, 248, 255, 0, 0, 0, 0, 103, 1, 0, 0, 32, 0, 0, 0,
        199, 1, 0, 0, 32, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 109, 18, 19, 0, 0, 0, 0, 0, 133, 0, 0,
        0, 14, 0, 0, 0, 119, 0, 0, 0, 32, 0, 0, 0, 99, 10, 252, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0,
        0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 10, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 99, 26, 244,
        255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 248, 255, 255, 255, 191, 163, 0,
        0, 0, 0, 0, 0, 7, 3, 0, 0, 244, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 2, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0,
        0, 0, 0, 0, 0, 0, 121, 18, 112, 0, 0, 0, 0, 0, 99, 42, 252, 255, 0, 0, 0, 0, 121, 22, 104,
        0, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 11, 0, 0, 0, 0, 0, 133,
        0, 0, 0, 14, 0, 0, 0, 123, 10, 240, 255, 0, 0, 0, 0, 123, 106, 232, 255, 0, 0, 0, 0, 191,
        162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 240, 255, 255, 255, 191, 163, 0, 0, 0, 0, 0, 0, 7, 3, 0,
        0, 232, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 4, 0, 0, 0, 0,
        0, 0, 133, 0, 0, 0, 2, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 191,
        22, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 14, 0, 0, 0, 191, 7, 0, 0, 0, 0, 0, 0, 123, 122, 240,
        255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 240, 255, 255, 255, 24, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 191, 9, 0, 0, 0, 0, 0, 0, 21,
        9, 121, 0, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 240, 255, 255, 255, 24, 1,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 3, 0, 0, 0, 121, 104, 80, 0, 0, 0,
        0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 109, 129, 113, 0, 0, 0, 0, 0, 119, 7, 0, 0, 32, 0, 0, 0,
        121, 147, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 0, 0, 0, 0, 99, 42, 232, 255, 0, 0, 0, 0, 123,
        42, 224, 255, 0, 0, 0, 0, 123, 42, 216, 255, 0, 0, 0, 0, 123, 42, 208, 255, 0, 0, 0, 0,
        123, 42, 200, 255, 0, 0, 0, 0, 123, 42, 192, 255, 0, 0, 0, 0, 123, 42, 184, 255, 0, 0, 0,
        0, 123, 42, 176, 255, 0, 0, 0, 0, 123, 42, 168, 255, 0, 0, 0, 0, 123, 42, 160, 255, 0, 0,
        0, 0, 123, 42, 152, 255, 0, 0, 0, 0, 123, 42, 144, 255, 0, 0, 0, 0, 123, 42, 136, 255, 0,
        0, 0, 0, 123, 42, 128, 255, 0, 0, 0, 0, 123, 42, 120, 255, 0, 0, 0, 0, 123, 42, 112, 255,
        0, 0, 0, 0, 123, 42, 104, 255, 0, 0, 0, 0, 123, 42, 96, 255, 0, 0, 0, 0, 123, 42, 88, 255,
        0, 0, 0, 0, 123, 42, 80, 255, 0, 0, 0, 0, 123, 42, 72, 255, 0, 0, 0, 0, 123, 42, 64, 255,
        0, 0, 0, 0, 123, 42, 56, 255, 0, 0, 0, 0, 123, 42, 48, 255, 0, 0, 0, 0, 123, 42, 40, 255,
        0, 0, 0, 0, 123, 42, 32, 255, 0, 0, 0, 0, 123, 42, 24, 255, 0, 0, 0, 0, 123, 42, 16, 255,
        0, 0, 0, 0, 123, 42, 8, 255, 0, 0, 0, 0, 123, 42, 0, 255, 0, 0, 0, 0, 123, 42, 248, 254, 0,
        0, 0, 0, 123, 42, 240, 254, 0, 0, 0, 0, 123, 42, 232, 254, 0, 0, 0, 0, 123, 42, 224, 254,
        0, 0, 0, 0, 115, 26, 228, 254, 0, 0, 0, 0, 99, 122, 224, 254, 0, 0, 0, 0, 183, 1, 0, 0, 0,
        1, 0, 0, 109, 129, 1, 0, 0, 0, 0, 0, 183, 8, 0, 0, 0, 1, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0,
        7, 1, 0, 0, 236, 254, 255, 255, 191, 130, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 112, 0, 0, 0,
        183, 1, 0, 0, 4, 0, 0, 0, 45, 129, 65, 0, 0, 0, 0, 0, 85, 0, 64, 0, 0, 0, 0, 0, 113, 161,
        236, 254, 0, 0, 0, 0, 21, 1, 8, 0, 80, 0, 0, 0, 85, 1, 19, 0, 71, 0, 0, 0, 113, 162, 237,
        254, 0, 0, 0, 0, 85, 2, 17, 0, 69, 0, 0, 0, 113, 162, 238, 254, 0, 0, 0, 0, 85, 2, 15, 0,
        84, 0, 0, 0, 113, 162, 239, 254, 0, 0, 0, 0, 21, 2, 38, 0, 32, 0, 0, 0, 5, 0, 12, 0, 0, 0,
        0, 0, 113, 162, 237, 254, 0, 0, 0, 0, 21, 2, 6, 0, 85, 0, 0, 0, 85, 2, 9, 0, 79, 0, 0, 0,
        113, 162, 238, 254, 0, 0, 0, 0, 85, 2, 7, 0, 83, 0, 0, 0, 113, 162, 239, 254, 0, 0, 0, 0,
        21, 2, 30, 0, 84, 0, 0, 0, 5, 0, 4, 0, 0, 0, 0, 0, 113, 162, 238, 254, 0, 0, 0, 0, 85, 2,
        2, 0, 84, 0, 0, 0, 113, 162, 239, 254, 0, 0, 0, 0, 21, 2, 25, 0, 32, 0, 0, 0, 183, 2, 0, 0,
        6, 0, 0, 0, 45, 130, 40, 0, 0, 0, 0, 0, 85, 1, 11, 0, 68, 0, 0, 0, 113, 161, 237, 254, 0,
        0, 0, 0, 85, 1, 37, 0, 69, 0, 0, 0, 113, 161, 238, 254, 0, 0, 0, 0, 85, 1, 35, 0, 76, 0, 0,
        0, 113, 161, 239, 254, 0, 0, 0, 0, 85, 1, 33, 0, 69, 0, 0, 0, 113, 161, 240, 254, 0, 0, 0,
        0, 85, 1, 31, 0, 84, 0, 0, 0, 113, 161, 241, 254, 0, 0, 0, 0, 21, 1, 12, 0, 69, 0, 0, 0, 5,
        0, 28, 0, 0, 0, 0, 0, 183, 2, 0, 0, 8, 0, 0, 0, 45, 130, 26, 0, 0, 0, 0, 0, 85, 1, 25, 0,
        72, 0, 0, 0, 113, 161, 237, 254, 0, 0, 0, 0, 85, 1, 23, 0, 84, 0, 0, 0, 113, 161, 238, 254,
        0, 0, 0, 0, 85, 1, 21, 0, 84, 0, 0, 0, 113, 161, 239, 254, 0, 0, 0, 0, 85, 1, 19, 0, 80, 0,
        0, 0, 113, 161, 240, 254, 0, 0, 0, 0, 85, 1, 17, 0, 47, 0, 0, 0, 99, 122, 252, 255, 0, 0,
        0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 10, 0, 0, 0, 0, 0, 99, 138, 232,
        254, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 224, 254, 255, 255, 191, 97, 0, 0,
        0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 255, 255, 255,
        255, 0, 0, 0, 0, 0, 0, 0, 0, 183, 5, 0, 0, 12, 1, 0, 0, 133, 0, 0, 0, 25, 0, 0, 0, 183, 0,
        0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 121, 17, 112, 0, 0, 0, 0, 0, 99, 26, 252, 255,
        0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 3, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0,
        0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 40,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 0,
        0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 22, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 22, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 240, 3, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 18, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 159, 235, 1,
        0, 24, 0, 0, 0, 0, 0, 0, 0, 236, 3, 0, 0, 236, 3, 0, 0, 238, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0,
        4, 32, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 64, 0, 0, 0,
        18, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 27, 0, 0, 0, 8, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 4, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0,
        32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0,
        0, 0, 5, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
        0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 14, 1, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
        12, 0, 0, 0, 64, 0, 0, 0, 18, 0, 0, 0, 14, 0, 0, 0, 128, 0, 0, 0, 27, 0, 0, 0, 14, 0, 0, 0,
        192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3,
        0, 0, 0, 5, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 14, 11, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 24, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 18, 0,
        0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 27, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
        14, 17, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0,
        0, 0, 0, 0, 6, 0, 0, 0, 12, 0, 0, 0, 64, 0, 0, 0, 18, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0,
        27, 0, 0, 0, 2, 0, 0, 0, 192, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 14, 19, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 22, 0, 0, 0, 120, 0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 128, 0, 0, 0,
        23, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 23, 0, 0, 0, 64, 0, 0, 0, 136, 0, 0, 0, 23, 0, 0, 0,
        128, 0, 0, 0, 140, 0, 0, 0, 23, 0, 0, 0, 192, 0, 0, 0, 144, 0, 0, 0, 23, 0, 0, 0, 0, 1, 0,
        0, 147, 0, 0, 0, 23, 0, 0, 0, 64, 1, 0, 0, 150, 0, 0, 0, 23, 0, 0, 0, 128, 1, 0, 0, 154, 0,
        0, 0, 23, 0, 0, 0, 192, 1, 0, 0, 158, 0, 0, 0, 23, 0, 0, 0, 0, 2, 0, 0, 161, 0, 0, 0, 23,
        0, 0, 0, 64, 2, 0, 0, 164, 0, 0, 0, 23, 0, 0, 0, 128, 2, 0, 0, 167, 0, 0, 0, 23, 0, 0, 0,
        192, 2, 0, 0, 170, 0, 0, 0, 23, 0, 0, 0, 0, 3, 0, 0, 173, 0, 0, 0, 23, 0, 0, 0, 64, 3, 0,
        0, 176, 0, 0, 0, 23, 0, 0, 0, 128, 3, 0, 0, 179, 0, 0, 0, 23, 0, 0, 0, 192, 3, 0, 0, 187,
        0, 0, 0, 23, 0, 0, 0, 0, 4, 0, 0, 190, 0, 0, 0, 23, 0, 0, 0, 64, 4, 0, 0, 193, 0, 0, 0, 23,
        0, 0, 0, 128, 4, 0, 0, 199, 0, 0, 0, 23, 0, 0, 0, 192, 4, 0, 0, 202, 0, 0, 0, 23, 0, 0, 0,
        0, 5, 0, 0, 205, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 3,
        0, 0, 0, 223, 0, 0, 0, 21, 0, 0, 0, 227, 0, 0, 0, 1, 0, 0, 12, 24, 0, 0, 0, 246, 0, 0, 0,
        1, 0, 0, 12, 24, 0, 0, 0, 13, 1, 0, 0, 1, 0, 0, 12, 24, 0, 0, 0, 38, 1, 0, 0, 1, 0, 0, 12,
        24, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0,
        0, 0, 29, 0, 0, 0, 5, 0, 0, 0, 13, 0, 0, 0, 61, 1, 0, 0, 0, 0, 0, 14, 30, 0, 0, 0, 1, 0, 0,
        0, 140, 8, 0, 0, 1, 0, 0, 15, 13, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 148, 8, 0,
        0, 4, 0, 0, 15, 120, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0,
        0, 32, 0, 0, 0, 18, 0, 0, 0, 64, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 88, 0, 0, 0, 32, 0, 0,
        0, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 107,
        101, 121, 95, 115, 105, 122, 101, 0, 118, 97, 108, 117, 101, 95, 115, 105, 122, 101, 0,
        105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95,
        95, 0, 97, 99, 116, 105, 118, 101, 95, 97, 112, 112, 95, 115, 111, 99, 107, 101, 116, 115,
        0, 114, 101, 97, 100, 95, 97, 114, 103, 115, 95, 109, 97, 112, 0, 104, 116, 116, 112, 95,
        101, 118, 101, 110, 116, 115, 0, 116, 114, 97, 99, 107, 101, 100, 95, 112, 105, 100, 115,
        0, 112, 116, 95, 114, 101, 103, 115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0,
        114, 49, 50, 0, 98, 112, 0, 98, 120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114,
        56, 0, 97, 120, 0, 99, 120, 0, 100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103,
        95, 97, 120, 0, 105, 112, 0, 99, 115, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115,
        0, 108, 111, 110, 103, 32, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0,
        99, 116, 120, 0, 104, 97, 110, 100, 108, 101, 95, 97, 99, 99, 101, 112, 116, 52, 95, 114,
        101, 116, 0, 107, 112, 114, 111, 98, 101, 95, 107, 115, 121, 115, 95, 114, 101, 97, 100,
        95, 101, 110, 116, 114, 121, 0, 107, 114, 101, 116, 112, 114, 111, 98, 101, 95, 107, 115,
        121, 115, 95, 114, 101, 97, 100, 95, 101, 120, 105, 116, 0, 107, 112, 114, 111, 98, 101,
        95, 107, 115, 121, 115, 95, 99, 108, 111, 115, 101, 0, 99, 104, 97, 114, 0, 76, 73, 67, 69,
        78, 83, 69, 0, 47, 112, 114, 111, 106, 101, 99, 116, 47, 115, 114, 99, 47, 98, 112, 102,
        47, 104, 116, 116, 112, 46, 98, 112, 102, 46, 99, 0, 32, 32, 32, 32, 105, 110, 116, 32,
        110, 101, 119, 95, 102, 100, 32, 61, 32, 80, 84, 95, 82, 69, 71, 83, 95, 82, 67, 40, 99,
        116, 120, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 110, 101, 119, 95, 102, 100, 32, 60,
        32, 48, 41, 0, 32, 32, 32, 32, 117, 54, 52, 32, 112, 105, 100, 95, 116, 103, 105, 100, 32,
        61, 32, 98, 112, 102, 95, 103, 101, 116, 95, 99, 117, 114, 114, 101, 110, 116, 95, 112,
        105, 100, 95, 116, 103, 105, 100, 40, 41, 59, 0, 32, 32, 32, 32, 117, 51, 50, 32, 112, 105,
        100, 32, 61, 32, 112, 105, 100, 95, 116, 103, 105, 100, 32, 62, 62, 32, 51, 50, 59, 0, 32,
        32, 32, 32, 95, 95, 117, 56, 32, 42, 116, 114, 97, 99, 107, 101, 100, 32, 32, 61, 32, 98,
        112, 102, 95, 109, 97, 112, 95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40,
        38, 116, 114, 97, 99, 107, 101, 100, 95, 112, 105, 100, 115, 44, 32, 38, 112, 105, 100, 41,
        59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 105, 115, 95, 116, 114, 97, 99, 107, 101, 100, 95,
        112, 105, 100, 115, 40, 112, 105, 100, 41, 41, 32, 123, 0, 32, 32, 32, 32, 32, 32, 32, 32,
        105, 110, 116, 32, 111, 110, 101, 32, 61, 32, 49, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32,
        98, 112, 102, 95, 109, 97, 112, 95, 117, 112, 100, 97, 116, 101, 95, 101, 108, 101, 109,
        40, 38, 97, 99, 116, 105, 118, 101, 95, 97, 112, 112, 95, 115, 111, 99, 107, 101, 116, 115,
        44, 32, 38, 110, 101, 119, 95, 102, 100, 44, 32, 38, 111, 110, 101, 44, 32, 66, 80, 70, 95,
        65, 78, 89, 41, 59, 0, 125, 0, 32, 32, 32, 32, 105, 110, 116, 32, 102, 100, 32, 61, 32, 40,
        105, 110, 116, 41, 80, 84, 95, 82, 69, 71, 83, 95, 80, 65, 82, 77, 49, 40, 99, 116, 120,
        41, 59, 0, 32, 32, 32, 32, 99, 104, 97, 114, 32, 42, 98, 117, 102, 32, 61, 32, 40, 99, 104,
        97, 114, 32, 42, 41, 80, 84, 95, 82, 69, 71, 83, 95, 80, 65, 82, 77, 50, 40, 99, 116, 120,
        41, 59, 0, 32, 32, 32, 32, 105, 110, 116, 32, 42, 101, 120, 105, 115, 116, 115, 32, 61, 32,
        98, 112, 102, 95, 109, 97, 112, 95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109,
        40, 38, 97, 99, 116, 105, 118, 101, 95, 97, 112, 112, 95, 115, 111, 99, 107, 101, 116, 115,
        44, 32, 38, 102, 100, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 33, 101, 120, 105, 115,
        116, 115, 41, 0, 32, 32, 32, 32, 117, 54, 52, 32, 97, 100, 100, 114, 32, 61, 32, 40, 117,
        54, 52, 41, 98, 117, 102, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95, 109, 97, 112, 95, 117,
        112, 100, 97, 116, 101, 95, 101, 108, 101, 109, 40, 38, 114, 101, 97, 100, 95, 97, 114,
        103, 115, 95, 109, 97, 112, 44, 32, 38, 112, 105, 100, 95, 116, 103, 105, 100, 44, 32, 38,
        97, 100, 100, 114, 44, 32, 66, 80, 70, 95, 65, 78, 89, 41, 59, 0, 105, 110, 116, 32, 107,
        114, 101, 116, 112, 114, 111, 98, 101, 95, 107, 115, 121, 115, 95, 114, 101, 97, 100, 95,
        101, 120, 105, 116, 40, 115, 116, 114, 117, 99, 116, 32, 112, 116, 95, 114, 101, 103, 115,
        32, 42, 99, 116, 120, 41, 0, 32, 32, 32, 32, 117, 54, 52, 32, 42, 98, 117, 102, 95, 97,
        100, 100, 114, 95, 112, 116, 114, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112, 95, 108, 111,
        111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 114, 101, 97, 100, 95, 97, 114, 103,
        115, 95, 109, 97, 112, 44, 32, 38, 112, 105, 100, 95, 116, 103, 105, 100, 41, 59, 0, 32,
        32, 32, 32, 105, 102, 32, 40, 33, 98, 117, 102, 95, 97, 100, 100, 114, 95, 112, 116, 114,
        41, 0, 32, 32, 32, 32, 98, 112, 102, 95, 109, 97, 112, 95, 100, 101, 108, 101, 116, 101,
        95, 101, 108, 101, 109, 40, 38, 114, 101, 97, 100, 95, 97, 114, 103, 115, 95, 109, 97, 112,
        44, 32, 38, 112, 105, 100, 95, 116, 103, 105, 100, 41, 59, 0, 32, 32, 32, 32, 108, 111,
        110, 103, 32, 98, 121, 116, 101, 115, 95, 114, 101, 97, 100, 32, 61, 32, 80, 84, 95, 82,
        69, 71, 83, 95, 82, 67, 40, 99, 116, 120, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 98,
        121, 116, 101, 115, 95, 114, 101, 97, 100, 32, 60, 61, 32, 48, 41, 0, 32, 32, 32, 32, 99,
        104, 97, 114, 32, 42, 98, 117, 102, 32, 61, 32, 40, 99, 104, 97, 114, 32, 42, 41, 42, 98,
        117, 102, 95, 97, 100, 100, 114, 95, 112, 116, 114, 59, 0, 32, 32, 32, 32, 115, 116, 114,
        117, 99, 116, 32, 101, 118, 101, 110, 116, 95, 116, 32, 101, 118, 116, 32, 61, 32, 123,
        125, 59, 0, 32, 32, 32, 32, 101, 118, 116, 46, 105, 115, 95, 114, 101, 113, 117, 101, 115,
        116, 32, 61, 32, 49, 59, 0, 32, 32, 32, 32, 101, 118, 116, 46, 112, 105, 100, 32, 61, 32,
        112, 105, 100, 59, 0, 32, 32, 32, 32, 115, 105, 122, 101, 95, 116, 32, 100, 97, 116, 97,
        95, 108, 101, 110, 32, 61, 32, 98, 121, 116, 101, 115, 95, 114, 101, 97, 100, 32, 60, 32,
        77, 65, 88, 95, 72, 84, 84, 80, 95, 68, 65, 84, 65, 95, 76, 69, 78, 32, 63, 32, 98, 121,
        116, 101, 115, 95, 114, 101, 97, 100, 32, 58, 32, 77, 65, 88, 95, 72, 84, 84, 80, 95, 68,
        65, 84, 65, 95, 76, 69, 78, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 98, 112, 102, 95, 112,
        114, 111, 98, 101, 95, 114, 101, 97, 100, 95, 117, 115, 101, 114, 40, 101, 118, 116, 46,
        100, 97, 116, 97, 44, 32, 100, 97, 116, 97, 95, 108, 101, 110, 44, 32, 98, 117, 102, 41,
        32, 33, 61, 32, 48, 41, 0, 32, 32, 32, 32, 105, 102, 32, 40, 40, 108, 101, 110, 32, 62, 61,
        32, 51, 32, 38, 38, 32, 100, 97, 116, 97, 91, 48, 93, 32, 61, 61, 32, 39, 71, 39, 32, 38,
        38, 32, 100, 97, 116, 97, 91, 49, 93, 32, 61, 61, 32, 39, 69, 39, 32, 38, 38, 32, 100, 97,
        116, 97, 91, 50, 93, 32, 61, 61, 32, 39, 84, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 51,
        93, 32, 61, 61, 32, 39, 32, 39, 41, 32, 124, 124, 0, 32, 32, 32, 32, 32, 32, 32, 32, 40,
        108, 101, 110, 32, 62, 61, 32, 52, 32, 38, 38, 32, 100, 97, 116, 97, 91, 48, 93, 32, 61,
        61, 32, 39, 80, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 49, 93, 32, 61, 61, 32, 39, 79,
        39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 50, 93, 32, 61, 61, 32, 39, 83, 39, 32, 38, 38,
        32, 100, 97, 116, 97, 91, 51, 93, 32, 61, 61, 32, 39, 84, 39, 41, 32, 124, 124, 0, 32, 32,
        32, 32, 32, 32, 32, 32, 40, 108, 101, 110, 32, 62, 61, 32, 51, 32, 38, 38, 32, 100, 97,
        116, 97, 91, 48, 93, 32, 61, 61, 32, 39, 80, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 49,
        93, 32, 61, 61, 32, 39, 85, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 50, 93, 32, 61, 61,
        32, 39, 84, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 51, 93, 32, 61, 61, 32, 39, 32, 39,
        41, 32, 124, 124, 0, 32, 32, 32, 32, 32, 32, 32, 32, 40, 108, 101, 110, 32, 62, 61, 32, 54,
        32, 38, 38, 32, 100, 97, 116, 97, 91, 48, 93, 32, 61, 61, 32, 39, 68, 39, 32, 38, 38, 32,
        100, 97, 116, 97, 91, 49, 93, 32, 61, 61, 32, 39, 69, 39, 32, 38, 38, 32, 100, 97, 116, 97,
        91, 50, 93, 32, 61, 61, 32, 39, 76, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 51, 93, 32,
        61, 61, 32, 39, 69, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 52, 93, 32, 61, 61, 32, 39,
        84, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 53, 93, 32, 61, 61, 32, 39, 69, 39, 41, 41,
        0, 32, 32, 32, 32, 105, 102, 32, 40, 108, 101, 110, 32, 62, 61, 32, 56, 32, 38, 38, 32,
        100, 97, 116, 97, 91, 48, 93, 32, 61, 61, 32, 39, 72, 39, 32, 38, 38, 32, 100, 97, 116, 97,
        91, 49, 93, 32, 61, 61, 32, 39, 84, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 50, 93, 32,
        61, 61, 32, 39, 84, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 51, 93, 32, 61, 61, 32, 39,
        80, 39, 32, 38, 38, 32, 100, 97, 116, 97, 91, 52, 93, 32, 61, 61, 32, 39, 47, 39, 41, 0,
        32, 32, 32, 32, 32, 32, 32, 32, 101, 118, 116, 46, 100, 97, 116, 97, 95, 108, 101, 110, 32,
        61, 32, 100, 97, 116, 97, 95, 108, 101, 110, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 98,
        112, 102, 95, 112, 101, 114, 102, 95, 101, 118, 101, 110, 116, 95, 111, 117, 116, 112, 117,
        116, 40, 99, 116, 120, 44, 32, 38, 104, 116, 116, 112, 95, 101, 118, 101, 110, 116, 115,
        44, 32, 66, 80, 70, 95, 70, 95, 67, 85, 82, 82, 69, 78, 84, 95, 67, 80, 85, 44, 32, 38,
        101, 118, 116, 44, 32, 115, 105, 122, 101, 111, 102, 40, 101, 118, 116, 41, 41, 59, 0, 32,
        32, 32, 32, 105, 110, 116, 32, 102, 100, 32, 61, 32, 80, 84, 95, 82, 69, 71, 83, 95, 80,
        65, 82, 77, 49, 40, 99, 116, 120, 41, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95, 109, 97,
        112, 95, 100, 101, 108, 101, 116, 101, 95, 101, 108, 101, 109, 40, 38, 97, 99, 116, 105,
        118, 101, 95, 97, 112, 112, 95, 115, 111, 99, 107, 101, 116, 115, 44, 32, 38, 102, 100, 41,
        59, 0, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 48, 59, 0, 108, 105, 99, 101, 110,
        115, 101, 0, 46, 109, 97, 112, 115, 0, 107, 114, 101, 116, 112, 114, 111, 98, 101, 47, 95,
        95, 115, 121, 115, 95, 97, 99, 99, 101, 112, 116, 52, 0, 107, 112, 114, 111, 98, 101, 47,
        107, 115, 121, 115, 95, 114, 101, 97, 100, 0, 107, 114, 101, 116, 112, 114, 111, 98, 101,
        47, 107, 115, 121, 115, 95, 114, 101, 97, 100, 0, 107, 112, 114, 111, 98, 101, 47, 95, 95,
        120, 54, 52, 95, 115, 121, 115, 95, 99, 108, 111, 115, 101, 0, 0, 0, 0, 0, 0, 0, 159, 235,
        1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 68, 0, 0, 0, 4, 6, 0, 0, 72, 6, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 154, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 178, 8, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 26, 0, 0, 0, 195, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 215, 8, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 16, 0, 0, 0, 154, 8, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0,
        69, 1, 0, 0, 97, 1, 0, 0, 18, 72, 1, 0, 8, 0, 0, 0, 69, 1, 0, 0, 97, 1, 0, 0, 9, 72, 1, 0,
        16, 0, 0, 0, 69, 1, 0, 0, 97, 1, 0, 0, 18, 72, 1, 0, 40, 0, 0, 0, 69, 1, 0, 0, 131, 1, 0,
        0, 9, 76, 1, 0, 48, 0, 0, 0, 69, 1, 0, 0, 151, 1, 0, 0, 20, 84, 1, 0, 56, 0, 0, 0, 69, 1,
        0, 0, 198, 1, 0, 0, 24, 88, 1, 0, 80, 0, 0, 0, 69, 1, 0, 0, 151, 1, 0, 0, 20, 84, 1, 0, 88,
        0, 0, 0, 69, 1, 0, 0, 228, 1, 0, 0, 22, 44, 1, 0, 112, 0, 0, 0, 69, 1, 0, 0, 35, 2, 0, 0,
        9, 96, 1, 0, 128, 0, 0, 0, 69, 1, 0, 0, 67, 2, 0, 0, 13, 100, 1, 0, 144, 0, 0, 0, 69, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 69, 1, 0, 0, 88, 2, 0, 0, 9, 104, 1, 0, 200, 0, 0,
        0, 69, 1, 0, 0, 162, 2, 0, 0, 1, 120, 1, 0, 178, 8, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 69, 1,
        0, 0, 164, 2, 0, 0, 19, 140, 1, 0, 8, 0, 0, 0, 69, 1, 0, 0, 164, 2, 0, 0, 9, 140, 1, 0, 16,
        0, 0, 0, 69, 1, 0, 0, 202, 2, 0, 0, 25, 144, 1, 0, 32, 0, 0, 0, 69, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 40, 0, 0, 0, 69, 1, 0, 0, 246, 2, 0, 0, 19, 152, 1, 0, 64, 0, 0, 0, 69, 1, 0, 0,
        55, 3, 0, 0, 9, 156, 1, 0, 72, 0, 0, 0, 69, 1, 0, 0, 151, 1, 0, 0, 20, 168, 1, 0, 80, 0, 0,
        0, 69, 1, 0, 0, 151, 1, 0, 0, 9, 168, 1, 0, 88, 0, 0, 0, 69, 1, 0, 0, 72, 3, 0, 0, 9, 172,
        1, 0, 104, 0, 0, 0, 69, 1, 0, 0, 151, 1, 0, 0, 20, 168, 1, 0, 128, 0, 0, 0, 69, 1, 0, 0,
        97, 3, 0, 0, 5, 180, 1, 0, 160, 0, 0, 0, 69, 1, 0, 0, 162, 2, 0, 0, 1, 188, 1, 0, 195, 8,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 69, 1, 0, 0, 165, 3, 0, 0, 0, 204, 1, 0, 8, 0, 0, 0, 69, 1,
        0, 0, 151, 1, 0, 0, 20, 212, 1, 0, 24, 0, 0, 0, 69, 1, 0, 0, 151, 1, 0, 0, 9, 212, 1, 0,
        40, 0, 0, 0, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 69, 1, 0, 0, 215, 3, 0, 0,
        25, 224, 1, 0, 80, 0, 0, 0, 69, 1, 0, 0, 31, 4, 0, 0, 9, 228, 1, 0, 96, 0, 0, 0, 69, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 69, 1, 0, 0, 54, 4, 0, 0, 5, 240, 1, 0, 128, 0, 0,
        0, 69, 1, 0, 0, 106, 4, 0, 0, 23, 252, 1, 0, 144, 0, 0, 0, 69, 1, 0, 0, 145, 4, 0, 0, 9, 0,
        2, 0, 152, 0, 0, 0, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 69, 1, 0, 0, 170, 4,
        0, 0, 25, 248, 1, 0, 176, 0, 0, 0, 69, 1, 0, 0, 209, 4, 0, 0, 20, 12, 2, 0, 192, 1, 0, 0,
        69, 1, 0, 0, 238, 4, 0, 0, 20, 20, 2, 0, 200, 1, 0, 0, 69, 1, 0, 0, 6, 5, 0, 0, 13, 16, 2,
        0, 216, 1, 0, 0, 69, 1, 0, 0, 25, 5, 0, 0, 23, 28, 2, 0, 232, 1, 0, 0, 69, 1, 0, 0, 112, 5,
        0, 0, 29, 32, 2, 0, 248, 1, 0, 0, 69, 1, 0, 0, 112, 5, 0, 0, 9, 32, 2, 0, 16, 2, 0, 0, 69,
        1, 0, 0, 112, 5, 0, 0, 9, 32, 2, 0, 32, 2, 0, 0, 69, 1, 0, 0, 171, 5, 0, 0, 22, 232, 0, 0,
        40, 2, 0, 0, 69, 1, 0, 0, 171, 5, 0, 0, 37, 232, 0, 0, 56, 2, 0, 0, 69, 1, 0, 0, 171, 5, 0,
        0, 40, 232, 0, 0, 64, 2, 0, 0, 69, 1, 0, 0, 171, 5, 0, 0, 55, 232, 0, 0, 72, 2, 0, 0, 69,
        1, 0, 0, 171, 5, 0, 0, 58, 232, 0, 0, 80, 2, 0, 0, 69, 1, 0, 0, 171, 5, 0, 0, 73, 232, 0,
        0, 88, 2, 0, 0, 69, 1, 0, 0, 171, 5, 0, 0, 76, 232, 0, 0, 96, 2, 0, 0, 69, 1, 0, 0, 171, 5,
        0, 0, 92, 232, 0, 0, 112, 2, 0, 0, 69, 1, 0, 0, 9, 6, 0, 0, 40, 236, 0, 0, 120, 2, 0, 0,
        69, 1, 0, 0, 9, 6, 0, 0, 55, 236, 0, 0, 136, 2, 0, 0, 69, 1, 0, 0, 9, 6, 0, 0, 58, 236, 0,
        0, 144, 2, 0, 0, 69, 1, 0, 0, 9, 6, 0, 0, 73, 236, 0, 0, 152, 2, 0, 0, 69, 1, 0, 0, 9, 6,
        0, 0, 76, 236, 0, 0, 160, 2, 0, 0, 69, 1, 0, 0, 9, 6, 0, 0, 92, 236, 0, 0, 176, 2, 0, 0,
        69, 1, 0, 0, 103, 6, 0, 0, 58, 240, 0, 0, 184, 2, 0, 0, 69, 1, 0, 0, 103, 6, 0, 0, 73, 240,
        0, 0, 192, 2, 0, 0, 69, 1, 0, 0, 103, 6, 0, 0, 76, 240, 0, 0, 200, 2, 0, 0, 69, 1, 0, 0,
        103, 6, 0, 0, 92, 240, 0, 0, 216, 2, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 19, 244, 0, 0, 224,
        2, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 37, 244, 0, 0, 232, 2, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0,
        40, 244, 0, 0, 240, 2, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 55, 244, 0, 0, 248, 2, 0, 0, 69, 1,
        0, 0, 197, 6, 0, 0, 58, 244, 0, 0, 0, 3, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 73, 244, 0, 0, 8,
        3, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 76, 244, 0, 0, 16, 3, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0,
        91, 244, 0, 0, 24, 3, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 94, 244, 0, 0, 32, 3, 0, 0, 69, 1,
        0, 0, 197, 6, 0, 0, 109, 244, 0, 0, 40, 3, 0, 0, 69, 1, 0, 0, 197, 6, 0, 0, 112, 244, 0, 0,
        48, 3, 0, 0, 69, 1, 0, 0, 171, 5, 0, 0, 9, 232, 0, 0, 72, 3, 0, 0, 69, 1, 0, 0, 69, 7, 0,
        0, 18, 12, 1, 0, 88, 3, 0, 0, 69, 1, 0, 0, 69, 7, 0, 0, 39, 12, 1, 0, 96, 3, 0, 0, 69, 1,
        0, 0, 69, 7, 0, 0, 54, 12, 1, 0, 104, 3, 0, 0, 69, 1, 0, 0, 69, 7, 0, 0, 57, 12, 1, 0, 112,
        3, 0, 0, 69, 1, 0, 0, 69, 7, 0, 0, 72, 12, 1, 0, 120, 3, 0, 0, 69, 1, 0, 0, 69, 7, 0, 0,
        75, 12, 1, 0, 128, 3, 0, 0, 69, 1, 0, 0, 69, 7, 0, 0, 90, 12, 1, 0, 136, 3, 0, 0, 69, 1, 0,
        0, 69, 7, 0, 0, 93, 12, 1, 0, 144, 3, 0, 0, 69, 1, 0, 0, 69, 7, 0, 0, 9, 12, 1, 0, 168, 3,
        0, 0, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 69, 1, 0, 0, 228, 1, 0, 0, 22, 44,
        1, 0, 200, 3, 0, 0, 69, 1, 0, 0, 35, 2, 0, 0, 9, 60, 2, 0, 208, 3, 0, 0, 69, 1, 0, 0, 177,
        7, 0, 0, 22, 64, 2, 0, 232, 3, 0, 0, 69, 1, 0, 0, 210, 7, 0, 0, 9, 72, 2, 0, 32, 4, 0, 0,
        69, 1, 0, 0, 162, 2, 0, 0, 1, 84, 2, 0, 215, 8, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 69, 1, 0, 0,
        42, 8, 0, 0, 14, 104, 2, 0, 8, 0, 0, 0, 69, 1, 0, 0, 42, 8, 0, 0, 9, 104, 2, 0, 24, 0, 0,
        0, 69, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 69, 1, 0, 0, 75, 8, 0, 0, 5, 108, 2,
        0, 56, 0, 0, 0, 69, 1, 0, 0, 126, 8, 0, 0, 5, 112, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0,
        0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 204, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
        0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2, 0, 0, 0, 0, 0, 0,
        64, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0,
        0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0,
        0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        40, 5, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 216, 5, 0, 0, 0, 0, 0, 0, 48, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 10, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 1, 0, 0, 0, 3, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 10, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0, 1,
        0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 10, 0, 0, 0, 0, 0, 0, 120, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        90, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 10, 0, 0, 0,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 118, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        248, 10, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 139, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 24, 11, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 163, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 11, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2,
        0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 190, 1, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 11, 0, 0, 0, 0, 0, 0, 242, 12,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        195, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 24, 0, 0, 0,
        0, 0, 0, 104, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
    ];
}
