// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(renamed_and_removed_lints)]
#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports, clippy::wildcard_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("grpc_bpf")
            .map("grpc_bpf.rodata", false)
            .prog("trace_grpc_headers");
        builder.build()
    }
    pub struct OpenGrpcMaps<'obj> {
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenGrpcMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "grpc_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct GrpcMaps<'obj> {
        pub rodata: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> GrpcMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "grpc_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenGrpcProgs<'obj> {
        pub trace_grpc_headers: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenGrpcProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut trace_grpc_headers = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "trace_grpc_headers" => trace_grpc_headers = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                trace_grpc_headers: trace_grpc_headers
                    .expect("prog `trace_grpc_headers` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct GrpcProgs<'obj> {
        pub trace_grpc_headers: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> GrpcProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenGrpcProgs<'obj>) -> Self {
            Self {
                trace_grpc_headers: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.trace_grpc_headers.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct GrpcSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> GrpcSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGrpcSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenGrpcSkel {
                maps: unsafe { OpenGrpcMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenGrpcProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for GrpcSkelBuilder {
        type Output = OpenGrpcSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGrpcSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenGrpcSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct pt_regs {
            pub r15: u64,
            pub r14: u64,
            pub r13: u64,
            pub r12: u64,
            pub bp: u64,
            pub bx: u64,
            pub r11: u64,
            pub r10: u64,
            pub r9: u64,
            pub r8: u64,
            pub ax: u64,
            pub cx: u64,
            pub dx: u64,
            pub si: u64,
            pub di: u64,
            pub orig_ax: u64,
            pub ip: u64,
            pub cs: u64,
            pub flags: u64,
            pub sp: u64,
            pub ss: u64,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 13],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }
    pub struct OpenGrpcSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenGrpcMaps<'obj>,
        pub progs: OpenGrpcProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenGrpcSkel<'obj> {
        type Output = GrpcSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<GrpcSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(GrpcSkel {
                maps: unsafe { GrpcMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: GrpcProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: GrpcLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct GrpcLinks {
        pub trace_grpc_headers: Option<libbpf_rs::Link>,
    }
    pub struct GrpcSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: GrpcMaps<'obj>,
        pub progs: GrpcProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: GrpcLinks,
    }

    unsafe impl Send for GrpcSkel<'_> {}
    unsafe impl Sync for GrpcSkel<'_> {}

    impl<'obj> Skel<'obj> for GrpcSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = GrpcLinks {
                trace_grpc_headers: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl GrpcSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 117, 112, 114, 111, 98, 101, 47, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114,
        115, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97, 0, 103, 114,
        112, 99, 46, 98, 112, 102, 46, 99, 0, 76, 66, 66, 48, 95, 49, 49, 0, 76, 66, 66, 48, 95,
        49, 52, 0, 76, 66, 66, 48, 95, 49, 54, 0, 76, 66, 66, 48, 95, 49, 57, 0, 76, 66, 66, 48,
        95, 50, 0, 76, 66, 66, 48, 95, 50, 48, 0, 76, 66, 66, 48, 95, 50, 49, 0, 76, 66, 66, 48,
        95, 51, 0, 76, 66, 66, 48, 95, 53, 0, 76, 66, 66, 48, 95, 55, 0, 76, 66, 66, 48, 95, 57, 0,
        116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95,
        95, 95, 95, 102, 109, 116, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101,
        97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 46, 49, 0, 116, 114, 97, 99,
        101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102,
        109, 116, 46, 50, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100,
        101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 46, 51, 0, 116, 114, 97, 99, 101, 95,
        103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116,
        46, 52, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114,
        115, 46, 95, 95, 95, 95, 102, 109, 116, 46, 53, 0, 116, 114, 97, 99, 101, 95, 103, 114,
        112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 46, 54,
        0, 76, 73, 67, 69, 78, 83, 69, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104,
        101, 97, 100, 101, 114, 115, 0, 46, 114, 101, 108, 117, 112, 114, 111, 98, 101, 47, 103,
        114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70,
        46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 53, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 0, 0, 3, 0, 80, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
        0, 3, 0, 184, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 3, 0, 88, 3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 3, 0, 176, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 3, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 3, 0, 184, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        111, 0, 0, 0, 0, 0, 3, 0, 224, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
        0, 0, 3, 0, 224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 3, 0, 40,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 3, 0, 88, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 3, 0, 240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 147, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
        174, 0, 0, 0, 1, 0, 5, 0, 16, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
        1, 0, 5, 0, 57, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 1, 0, 5, 0, 75,
        0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 1, 0, 5, 0, 116, 0, 0, 0, 0, 0,
        0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 34, 1, 0, 0, 1, 0, 5, 0, 142, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 63, 1, 0, 0, 1, 0, 5, 0, 154, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 1, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 100, 1, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        192, 3, 0, 0, 0, 0, 0, 0, 121, 22, 112, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 183, 2, 0, 0, 16, 0, 0, 0, 191, 99, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0,
        7, 6, 0, 0, 8, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 232, 255, 255, 255, 183, 2,
        0, 0, 24, 0, 0, 0, 191, 99, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 112, 0, 0, 0, 121, 163, 232,
        255, 0, 0, 0, 0, 121, 164, 240, 255, 0, 0, 0, 0, 121, 165, 248, 255, 0, 0, 0, 0, 24, 1, 0,
        0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 41, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0,
        0, 121, 163, 232, 255, 0, 0, 0, 0, 21, 3, 2, 0, 0, 0, 0, 0, 121, 164, 240, 255, 0, 0, 0, 0,
        85, 4, 5, 0, 0, 0, 0, 0, 24, 1, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0,
        18, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 5, 0, 32, 0, 0, 0, 0, 0, 121, 165, 248, 255, 0, 0,
        0, 0, 24, 1, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 41, 0, 0, 0, 133, 0,
        0, 0, 6, 0, 0, 0, 183, 1, 0, 0, 10, 0, 0, 0, 121, 162, 240, 255, 0, 0, 0, 0, 45, 33, 1, 0,
        0, 0, 0, 0, 183, 2, 0, 0, 10, 0, 0, 0, 21, 2, 22, 0, 0, 0, 0, 0, 183, 9, 0, 0, 0, 0, 0, 0,
        183, 6, 0, 0, 0, 0, 0, 0, 183, 8, 0, 0, 0, 0, 0, 0, 183, 7, 0, 0, 0, 0, 0, 0, 123, 42, 248,
        254, 0, 0, 0, 0, 121, 163, 232, 255, 0, 0, 0, 0, 15, 131, 0, 0, 0, 0, 0, 0, 191, 161, 0, 0,
        0, 0, 0, 0, 7, 1, 0, 0, 192, 255, 255, 255, 183, 2, 0, 0, 40, 0, 0, 0, 133, 0, 0, 0, 112,
        0, 0, 0, 21, 0, 12, 0, 0, 0, 0, 0, 24, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183,
        2, 0, 0, 26, 0, 0, 0, 191, 99, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 121, 162, 248,
        254, 0, 0, 0, 0, 7, 6, 0, 0, 1, 0, 0, 0, 7, 8, 0, 0, 40, 0, 0, 0, 7, 7, 0, 0, 1, 0, 0, 0,
        45, 114, 239, 255, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 123,
        154, 184, 255, 0, 0, 0, 0, 123, 154, 176, 255, 0, 0, 0, 0, 123, 154, 168, 255, 0, 0, 0, 0,
        123, 154, 160, 255, 0, 0, 0, 0, 123, 154, 152, 255, 0, 0, 0, 0, 123, 154, 144, 255, 0, 0,
        0, 0, 123, 154, 136, 255, 0, 0, 0, 0, 123, 154, 128, 255, 0, 0, 0, 0, 121, 162, 200, 255,
        0, 0, 0, 0, 183, 1, 0, 0, 63, 0, 0, 0, 45, 33, 1, 0, 0, 0, 0, 0, 183, 2, 0, 0, 63, 0, 0, 0,
        121, 163, 192, 255, 0, 0, 0, 0, 21, 3, 11, 0, 0, 0, 0, 0, 21, 2, 10, 0, 0, 0, 0, 0, 7, 2,
        0, 0, 1, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 128, 255, 255, 255, 123, 26, 240,
        254, 0, 0, 0, 0, 133, 0, 0, 0, 114, 0, 0, 0, 24, 1, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 183, 2, 0, 0, 12, 0, 0, 0, 121, 163, 240, 254, 0, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0,
        123, 154, 120, 255, 0, 0, 0, 0, 123, 154, 112, 255, 0, 0, 0, 0, 123, 154, 104, 255, 0, 0,
        0, 0, 123, 154, 96, 255, 0, 0, 0, 0, 123, 154, 88, 255, 0, 0, 0, 0, 123, 154, 80, 255, 0,
        0, 0, 0, 123, 154, 72, 255, 0, 0, 0, 0, 123, 154, 64, 255, 0, 0, 0, 0, 123, 154, 56, 255,
        0, 0, 0, 0, 123, 154, 48, 255, 0, 0, 0, 0, 123, 154, 40, 255, 0, 0, 0, 0, 123, 154, 32,
        255, 0, 0, 0, 0, 123, 154, 24, 255, 0, 0, 0, 0, 123, 154, 16, 255, 0, 0, 0, 0, 123, 154, 8,
        255, 0, 0, 0, 0, 123, 154, 0, 255, 0, 0, 0, 0, 121, 162, 216, 255, 0, 0, 0, 0, 183, 1, 0,
        0, 127, 0, 0, 0, 45, 33, 1, 0, 0, 0, 0, 0, 183, 2, 0, 0, 127, 0, 0, 0, 121, 163, 208, 255,
        0, 0, 0, 0, 21, 3, 202, 255, 0, 0, 0, 0, 21, 2, 201, 255, 0, 0, 0, 0, 7, 2, 0, 0, 1, 0, 0,
        0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 255, 255, 255, 123, 26, 240, 254, 0, 0, 0, 0,
        133, 0, 0, 0, 114, 0, 0, 0, 24, 1, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0,
        0, 13, 0, 0, 0, 121, 163, 240, 254, 0, 0, 0, 0, 5, 0, 190, 255, 0, 0, 0, 0, 68, 117, 97,
        108, 32, 66, 83, 68, 47, 71, 80, 76, 0, 102, 114, 97, 109, 101, 95, 112, 116, 114, 32, 61,
        32, 37, 112, 10, 0, 70, 105, 101, 108, 100, 115, 32, 112, 116, 114, 32, 61, 32, 37, 112,
        44, 32, 108, 101, 110, 32, 61, 32, 37, 108, 108, 117, 44, 32, 99, 97, 112, 32, 61, 32, 37,
        108, 108, 117, 10, 0, 78, 111, 32, 104, 101, 97, 100, 101, 114, 115, 32, 102, 111, 117,
        110, 100, 10, 0, 70, 105, 101, 108, 100, 115, 46, 112, 116, 114, 32, 61, 32, 37, 112, 44,
        32, 108, 101, 110, 32, 61, 32, 37, 108, 108, 117, 44, 32, 99, 97, 112, 32, 61, 32, 37, 108,
        108, 117, 10, 0, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 104,
        101, 97, 100, 101, 114, 32, 37, 100, 10, 0, 32, 32, 78, 97, 109, 101, 58, 32, 37, 115, 10,
        0, 32, 32, 86, 97, 108, 117, 101, 58, 32, 37, 115, 10, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 21, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 184, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0,
        144, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        21, 0, 0, 0, 152, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 21, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0,
        0, 0, 0, 0, 0, 32, 3, 0, 0, 32, 3, 0, 0, 125, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0,
        1, 0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 3,
        0, 0, 0, 64, 0, 0, 0, 17, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 21, 0, 0, 0, 3, 0, 0, 0, 192,
        0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 28, 0, 0, 0, 3, 0, 0, 0, 64, 1, 0, 0, 31, 0,
        0, 0, 3, 0, 0, 0, 128, 1, 0, 0, 35, 0, 0, 0, 3, 0, 0, 0, 192, 1, 0, 0, 39, 0, 0, 0, 3, 0,
        0, 0, 0, 2, 0, 0, 42, 0, 0, 0, 3, 0, 0, 0, 64, 2, 0, 0, 45, 0, 0, 0, 3, 0, 0, 0, 128, 2, 0,
        0, 48, 0, 0, 0, 3, 0, 0, 0, 192, 2, 0, 0, 51, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 54, 0, 0, 0,
        3, 0, 0, 0, 64, 3, 0, 0, 57, 0, 0, 0, 3, 0, 0, 0, 128, 3, 0, 0, 60, 0, 0, 0, 3, 0, 0, 0,
        192, 3, 0, 0, 68, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 71, 0, 0, 0, 3, 0, 0, 0, 64, 4, 0, 0,
        74, 0, 0, 0, 3, 0, 0, 0, 128, 4, 0, 0, 80, 0, 0, 0, 3, 0, 0, 0, 192, 4, 0, 0, 83, 0, 0, 0,
        3, 0, 0, 0, 0, 5, 0, 0, 86, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 13, 5, 0, 0, 0, 104, 0, 0, 0, 1, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0,
        0, 1, 112, 0, 0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 131, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 9, 0, 0, 0, 13, 0, 0, 0, 136, 0, 0, 0,
        0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 14, 8, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 10, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0,
        0, 16, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 14, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
        0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 41, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 18, 0, 0, 0, 220,
        0, 0, 0, 0, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 26, 0, 0, 0, 22, 1,
        0, 0, 0, 0, 0, 14, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0,
        0, 9, 0, 0, 0, 12, 0, 0, 0, 51, 1, 0, 0, 0, 0, 0, 14, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 13, 0, 0, 0, 80, 1, 0, 0, 0, 0, 0, 14, 23,
        0, 0, 0, 0, 0, 0, 0, 89, 7, 0, 0, 1, 0, 0, 15, 13, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 13, 0,
        0, 0, 97, 7, 0, 0, 7, 0, 0, 15, 167, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 15, 0,
        0, 0, 16, 0, 0, 0, 41, 0, 0, 0, 17, 0, 0, 0, 57, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 75, 0,
        0, 0, 41, 0, 0, 0, 20, 0, 0, 0, 116, 0, 0, 0, 26, 0, 0, 0, 22, 0, 0, 0, 142, 0, 0, 0, 12,
        0, 0, 0, 24, 0, 0, 0, 154, 0, 0, 0, 13, 0, 0, 0, 0, 112, 116, 95, 114, 101, 103, 115, 0,
        114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112, 0, 98, 120, 0,
        114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120, 0, 100, 120,
        0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0, 99, 115, 0,
        102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115, 0, 108, 111, 110, 103, 32, 117, 110, 115,
        105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 99, 116, 120, 0, 105, 110, 116, 0, 116, 114,
        97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 0, 99, 104, 97,
        114, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 76,
        73, 67, 69, 78, 83, 69, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97,
        100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 0, 116, 114, 97, 99, 101, 95, 103,
        114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 46,
        49, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115,
        46, 95, 95, 95, 95, 102, 109, 116, 46, 50, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99,
        95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 46, 51, 0, 116,
        114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95,
        95, 95, 102, 109, 116, 46, 52, 0, 116, 114, 97, 99, 101, 95, 103, 114, 112, 99, 95, 104,
        101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95, 102, 109, 116, 46, 53, 0, 116, 114, 97,
        99, 101, 95, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114, 115, 46, 95, 95, 95, 95,
        102, 109, 116, 46, 54, 0, 47, 112, 114, 111, 106, 101, 99, 116, 47, 115, 114, 99, 47, 98,
        112, 102, 47, 103, 114, 112, 99, 46, 98, 112, 102, 46, 99, 0, 32, 32, 32, 32, 118, 111,
        105, 100, 32, 42, 102, 114, 97, 109, 101, 95, 112, 116, 114, 32, 61, 32, 40, 118, 111, 105,
        100, 32, 42, 41, 99, 116, 120, 45, 62, 100, 105, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95,
        112, 114, 105, 110, 116, 107, 40, 34, 102, 114, 97, 109, 101, 95, 112, 116, 114, 32, 61,
        32, 37, 112, 92, 110, 34, 44, 32, 102, 114, 97, 109, 101, 95, 112, 116, 114, 41, 59, 0, 32,
        32, 32, 32, 98, 112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97, 100, 95, 117, 115,
        101, 114, 40, 38, 102, 105, 101, 108, 100, 115, 44, 32, 115, 105, 122, 101, 111, 102, 40,
        102, 105, 101, 108, 100, 115, 41, 44, 32, 102, 114, 97, 109, 101, 95, 112, 116, 114, 32,
        43, 32, 48, 120, 48, 56, 41, 59, 32, 47, 47, 32, 79, 102, 102, 115, 101, 116, 32, 48, 120,
        48, 56, 32, 105, 115, 32, 119, 104, 101, 114, 101, 32, 116, 104, 101, 32, 102, 105, 101,
        108, 100, 115, 32, 115, 108, 105, 99, 101, 32, 115, 116, 97, 114, 116, 115, 32, 105, 110,
        32, 77, 101, 116, 97, 72, 101, 97, 100, 101, 114, 115, 70, 114, 97, 109, 101, 0, 32, 32,
        32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 70, 105, 101, 108, 100,
        115, 32, 112, 116, 114, 32, 61, 32, 37, 112, 44, 32, 108, 101, 110, 32, 61, 32, 37, 108,
        108, 117, 44, 32, 99, 97, 112, 32, 61, 32, 37, 108, 108, 117, 92, 110, 34, 44, 32, 102,
        105, 101, 108, 100, 115, 46, 112, 116, 114, 44, 32, 102, 105, 101, 108, 100, 115, 46, 108,
        101, 110, 44, 32, 102, 105, 101, 108, 100, 115, 46, 99, 97, 112, 41, 59, 0, 32, 32, 32, 32,
        105, 102, 32, 40, 102, 105, 101, 108, 100, 115, 46, 112, 116, 114, 32, 61, 61, 32, 78, 85,
        76, 76, 32, 124, 124, 32, 102, 105, 101, 108, 100, 115, 46, 108, 101, 110, 32, 61, 61, 32,
        48, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107,
        40, 34, 78, 111, 32, 104, 101, 97, 100, 101, 114, 115, 32, 102, 111, 117, 110, 100, 92,
        110, 34, 41, 59, 0, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34,
        70, 105, 101, 108, 100, 115, 46, 112, 116, 114, 32, 61, 32, 37, 112, 44, 32, 108, 101, 110,
        32, 61, 32, 37, 108, 108, 117, 44, 32, 99, 97, 112, 32, 61, 32, 37, 108, 108, 117, 92, 110,
        34, 44, 32, 102, 105, 101, 108, 100, 115, 46, 112, 116, 114, 44, 32, 102, 105, 101, 108,
        100, 115, 46, 108, 101, 110, 44, 32, 102, 105, 101, 108, 100, 115, 46, 99, 97, 112, 41, 59,
        0, 32, 32, 32, 32, 95, 95, 117, 54, 52, 32, 110, 117, 109, 95, 104, 101, 97, 100, 101, 114,
        115, 32, 61, 32, 102, 105, 101, 108, 100, 115, 46, 108, 101, 110, 59, 0, 32, 32, 32, 32,
        105, 102, 32, 40, 110, 117, 109, 95, 104, 101, 97, 100, 101, 114, 115, 32, 62, 32, 49, 48,
        41, 0, 32, 32, 32, 32, 102, 111, 114, 32, 40, 105, 110, 116, 32, 105, 32, 61, 32, 48, 59,
        32, 105, 32, 60, 32, 110, 117, 109, 95, 104, 101, 97, 100, 101, 114, 115, 59, 32, 105, 43,
        43, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 118, 111, 105, 100, 32, 42, 104, 101, 97, 100,
        101, 114, 95, 97, 100, 100, 114, 32, 61, 32, 102, 105, 101, 108, 100, 115, 46, 112, 116,
        114, 32, 43, 32, 40, 105, 32, 42, 32, 52, 48, 41, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32,
        115, 116, 114, 117, 99, 116, 32, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101, 108, 100,
        32, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101, 108, 100, 59, 0, 32, 32, 32, 32, 32,
        32, 32, 32, 105, 102, 32, 40, 98, 112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97,
        100, 95, 117, 115, 101, 114, 40, 38, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101, 108,
        100, 44, 32, 115, 105, 122, 101, 111, 102, 40, 104, 101, 97, 100, 101, 114, 95, 102, 105,
        101, 108, 100, 41, 44, 32, 104, 101, 97, 100, 101, 114, 95, 97, 100, 100, 114, 41, 32, 33,
        61, 32, 48, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 112, 102, 95, 112,
        114, 105, 110, 116, 107, 40, 34, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101,
        97, 100, 32, 104, 101, 97, 100, 101, 114, 32, 37, 100, 92, 110, 34, 44, 32, 105, 41, 59, 0,
        125, 0, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 110, 97, 109, 101, 95, 98,
        117, 102, 91, 54, 52, 93, 32, 61, 32, 123, 48, 125, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32,
        95, 95, 117, 54, 52, 32, 110, 97, 109, 101, 95, 114, 101, 97, 100, 95, 108, 101, 110, 32,
        61, 32, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101, 108, 100, 46, 110, 97, 109, 101,
        95, 108, 101, 110, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 110, 97, 109,
        101, 95, 114, 101, 97, 100, 95, 108, 101, 110, 32, 62, 32, 54, 51, 41, 0, 32, 32, 32, 32,
        32, 32, 32, 32, 105, 102, 32, 40, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101, 108, 100,
        46, 110, 97, 109, 101, 95, 112, 116, 114, 32, 38, 38, 32, 110, 97, 109, 101, 95, 114, 101,
        97, 100, 95, 108, 101, 110, 32, 62, 32, 48, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        32, 32, 98, 112, 102, 95, 112, 114, 111, 98, 101, 95, 114, 101, 97, 100, 95, 117, 115, 101,
        114, 95, 115, 116, 114, 40, 110, 97, 109, 101, 95, 98, 117, 102, 44, 32, 110, 97, 109, 101,
        95, 114, 101, 97, 100, 95, 108, 101, 110, 32, 43, 32, 49, 44, 32, 104, 101, 97, 100, 101,
        114, 95, 102, 105, 101, 108, 100, 46, 110, 97, 109, 101, 95, 112, 116, 114, 41, 59, 0, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107,
        40, 34, 32, 32, 78, 97, 109, 101, 58, 32, 37, 115, 92, 110, 34, 44, 32, 110, 97, 109, 101,
        95, 98, 117, 102, 41, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 118, 97,
        108, 117, 101, 95, 98, 117, 102, 91, 49, 50, 56, 93, 32, 61, 32, 123, 48, 125, 59, 0, 32,
        32, 32, 32, 32, 32, 32, 32, 95, 95, 117, 54, 52, 32, 118, 97, 108, 117, 101, 95, 114, 101,
        97, 100, 95, 108, 101, 110, 32, 61, 32, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101,
        108, 100, 46, 118, 97, 108, 117, 101, 95, 108, 101, 110, 59, 0, 32, 32, 32, 32, 32, 32, 32,
        32, 105, 102, 32, 40, 118, 97, 108, 117, 101, 95, 114, 101, 97, 100, 95, 108, 101, 110, 32,
        62, 32, 49, 50, 55, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 104, 101, 97,
        100, 101, 114, 95, 102, 105, 101, 108, 100, 46, 118, 97, 108, 117, 101, 95, 112, 116, 114,
        32, 38, 38, 32, 118, 97, 108, 117, 101, 95, 114, 101, 97, 100, 95, 108, 101, 110, 32, 62,
        32, 48, 41, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114,
        111, 98, 101, 95, 114, 101, 97, 100, 95, 117, 115, 101, 114, 95, 115, 116, 114, 40, 118,
        97, 108, 117, 101, 95, 98, 117, 102, 44, 32, 118, 97, 108, 117, 101, 95, 114, 101, 97, 100,
        95, 108, 101, 110, 32, 43, 32, 49, 44, 32, 104, 101, 97, 100, 101, 114, 95, 102, 105, 101,
        108, 100, 46, 118, 97, 108, 117, 101, 95, 112, 116, 114, 41, 59, 0, 32, 32, 32, 32, 32, 32,
        32, 32, 32, 32, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 32, 32, 86,
        97, 108, 117, 101, 58, 32, 37, 115, 92, 110, 34, 44, 32, 118, 97, 108, 117, 101, 95, 98,
        117, 102, 41, 59, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97,
        0, 117, 112, 114, 111, 98, 101, 47, 103, 114, 112, 99, 95, 104, 101, 97, 100, 101, 114,
        115, 0, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 172, 2,
        0, 0, 192, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 105, 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0,
        0, 16, 0, 0, 0, 105, 7, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 109, 1, 0, 0, 137, 1, 0, 0, 36, 132,
        0, 0, 8, 0, 0, 0, 109, 1, 0, 0, 176, 1, 0, 0, 5, 136, 0, 0, 48, 0, 0, 0, 109, 1, 0, 0, 223,
        1, 0, 0, 60, 148, 0, 0, 64, 0, 0, 0, 109, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0,
        109, 1, 0, 0, 223, 1, 0, 0, 5, 148, 0, 0, 96, 0, 0, 0, 109, 1, 0, 0, 103, 2, 0, 0, 5, 152,
        0, 0, 152, 0, 0, 0, 109, 1, 0, 0, 200, 2, 0, 0, 16, 156, 0, 0, 160, 0, 0, 0, 109, 1, 0, 0,
        200, 2, 0, 0, 28, 156, 0, 0, 168, 0, 0, 0, 109, 1, 0, 0, 200, 2, 0, 0, 38, 156, 0, 0, 176,
        0, 0, 0, 109, 1, 0, 0, 200, 2, 0, 0, 9, 156, 0, 0, 184, 0, 0, 0, 109, 1, 0, 0, 247, 2, 0,
        0, 9, 164, 0, 0, 224, 0, 0, 0, 109, 1, 0, 0, 33, 3, 0, 0, 5, 184, 0, 0, 16, 1, 0, 0, 109,
        1, 0, 0, 130, 3, 0, 0, 32, 192, 0, 0, 24, 1, 0, 0, 109, 1, 0, 0, 166, 3, 0, 0, 9, 196, 0,
        0, 40, 1, 0, 0, 109, 1, 0, 0, 192, 3, 0, 0, 5, 216, 0, 0, 88, 1, 0, 0, 109, 1, 0, 0, 234,
        3, 0, 0, 36, 232, 0, 0, 96, 1, 0, 0, 109, 1, 0, 0, 29, 4, 0, 0, 9, 236, 0, 0, 112, 1, 0, 0,
        109, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1, 0, 0, 109, 1, 0, 0, 71, 4, 0, 0, 13, 248, 0,
        0, 136, 1, 0, 0, 109, 1, 0, 0, 71, 4, 0, 0, 13, 248, 0, 0, 144, 1, 0, 0, 109, 1, 0, 0, 159,
        4, 0, 0, 13, 0, 1, 0, 176, 1, 0, 0, 109, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0,
        109, 1, 0, 0, 192, 3, 0, 0, 23, 216, 0, 0, 208, 1, 0, 0, 109, 1, 0, 0, 192, 3, 0, 0, 39,
        216, 0, 0, 216, 1, 0, 0, 109, 1, 0, 0, 192, 3, 0, 0, 5, 216, 0, 0, 224, 1, 0, 0, 109, 1, 0,
        0, 216, 4, 0, 0, 1, 112, 1, 0, 240, 1, 0, 0, 109, 1, 0, 0, 218, 4, 0, 0, 14, 16, 1, 0, 48,
        2, 0, 0, 109, 1, 0, 0, 251, 4, 0, 0, 44, 20, 1, 0, 64, 2, 0, 0, 109, 1, 0, 0, 48, 5, 0, 0,
        13, 24, 1, 0, 80, 2, 0, 0, 109, 1, 0, 0, 80, 5, 0, 0, 26, 36, 1, 0, 88, 2, 0, 0, 109, 1, 0,
        0, 80, 5, 0, 0, 35, 36, 1, 0, 104, 2, 0, 0, 109, 1, 0, 0, 136, 5, 0, 0, 47, 44, 1, 0, 128,
        2, 0, 0, 109, 1, 0, 0, 136, 5, 0, 0, 13, 44, 1, 0, 144, 2, 0, 0, 109, 1, 0, 0, 225, 5, 0,
        0, 13, 48, 1, 0, 184, 2, 0, 0, 109, 1, 0, 0, 19, 6, 0, 0, 14, 60, 1, 0, 56, 3, 0, 0, 109,
        1, 0, 0, 54, 6, 0, 0, 45, 64, 1, 0, 72, 3, 0, 0, 109, 1, 0, 0, 109, 6, 0, 0, 13, 68, 1, 0,
        88, 3, 0, 0, 109, 1, 0, 0, 143, 6, 0, 0, 26, 80, 1, 0, 96, 3, 0, 0, 109, 1, 0, 0, 143, 6,
        0, 0, 36, 80, 1, 0, 112, 3, 0, 0, 109, 1, 0, 0, 201, 6, 0, 0, 48, 88, 1, 0, 136, 3, 0, 0,
        109, 1, 0, 0, 201, 6, 0, 0, 13, 88, 1, 0, 152, 3, 0, 0, 109, 1, 0, 0, 37, 7, 0, 0, 13, 92,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        64, 0, 0, 0, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 224, 1, 0, 0, 0, 0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 7, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
        1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 7, 0, 0, 0, 0, 0, 0, 167,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 119, 1, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 8, 0, 0,
        0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16,
        0, 0, 0, 0, 0, 0, 0, 143, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 9, 0, 0, 0, 0, 0, 0, 181, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 192, 19, 0, 0, 0, 0, 0, 0, 224, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
